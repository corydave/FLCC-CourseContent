^^ LAB - `wonky_util`

## DESCRIPTION

This is the second lab (in a series) that explores how multiple modules (files, scripts) can work together. 

Given that this is the first foray into importing custom-made utility files, much of the work is done for you. The module that runs, `wonky_program.py` is provided for you. It will be stored up on CodeGrade for you automatically, so when it is time to submit your work *you will not submit this file*. You may certainly make a copy of this file and experiment with it, but any changes you make to it while you are poking and prodding will not be kept for the final submission.

Your task is to complete the `wonky_util.py` module. There are comments (as well as "docstrings") in each of the functions right now; your task is to implement the function by writing the appropriate code. Note that some functions **return** values and other functions **print** values.


## SPECIFICATIONS

* Starter code has been provided for this lab - there are two files:
    * `wonky_program.py` is what will be run when you submit to CodeGrade. Note that if you make any alterations to `wonky_program.py` they will *not* be kept when the software is run at CodeGrade.
    * `wonky_util.py` is the code you will be modifying. You can check to see if the code works by running `wonky_program.py` which imports `wonky_util.py`

* The filename for this program is `wonky_util.py`

* Complete the functions in `wonky_util.py` as described in the comments of the code.

* Add a comment with your name, date, and program description at the top!


## SAMPLE OUTPUT


```
==================================================================
THIS IS A TEST OF THE `wonky_util.py` module. This is only a test.
==================================================================


CALL TO `roll_one_d12()`:
8


CALL TO `roll_two_d12()`:
Die 1 is 1 and die 2 is 7 and the sum is 8


CALL TO `upper_string(str)`:
Enter a string: dave
DAVE


CALL TO `compliment()`:
You smell like petunias, which is nice!


CALL TO `personal_compliment(name)`:
Enter your name: DAVE
Hey, DAVE you are super nice!


CALL TO `add(num1, num2)`:
Enter a number: 4
Enter a second number: 5
The sum is 9


==================================================================
 THIS CONCLUDES THE TEST. Thank you for your patience and effort.
==================================================================

```
<br />

```
==================================================================
THIS IS A TEST OF THE `wonky_util.py` module. This is only a test.
==================================================================


CALL TO `roll_one_d12()`:
6


CALL TO `roll_two_d12()`:
Die 1 is 9 and die 2 is 4 and the sum is 13


CALL TO `upper_string(str)`:
Enter a string: this IS a TeSt
THIS IS A TEST


CALL TO `compliment()`:
You smell like petunias, which is nice!


CALL TO `personal_compliment(name)`:
Enter your name: Mr. Pickles
Hey, MR. PICKLES you are super nice!


CALL TO `add(num1, num2)`:
Enter a number: 100
Enter a second number: -99
The sum is 1


==================================================================
 THIS CONCLUDES THE TEST. Thank you for your patience and effort.
==================================================================

```

## STARTER CODE

You may use the following code as starter code. You will need to change the comments (for instance, your name and the date).

^callout file-download

[`wonky_util.py`](https://drive.google.com/uc?export=download&id=1h6V4lKZt9yst3gzgJRqqNwqXmcG7me3n)

[`wonky_program.py`](https://drive.google.com/uc?export=download&id=1FHXbNi8wQHxrq5oJaxEaR3klfIvh7LkX)

Download these files and load them into your IDE.

^callout-end


^acc

^^^ `wonky_program.py`

```python ^copy

# FILE NAME - wonky_program.py

# NAME - Dave Ghidiu
# DATE - October 1, 2022
# DESCRIPTION - This program leverages the `wonky_util.py` module to do silly
#               things you probably wouldn't normally do in a program. But the
#               lessons here (mainly how to call and handle functions from a
#               different module and playing with RETURNS and INPUT) are pretty
#               worthwhile.

import wonky_util

def main():
    wonky_program()

def wonky_program():
    print('==================================================================')
    print('THIS IS A TEST OF THE `wonky_util.py` module. This is only a test.')
    print('==================================================================')

    print()
    print()

    print('CALL TO `roll_one_d12()`:')
    # Since `roll_one_d12()` RETURNS a number, we can include
    # it in a `print()` statement.
    print(wonky_util.roll_one_d12())

    print()
    print()

    print('CALL TO `roll_two_d12()`:')
    # In this case, `roll_two_d12()` does not RETURN a number
    # so we  can't put it in a `print()` statement. Instead, we can 
    # just make a call to the function.
    wonky_util.roll_two_d12()
    
    print()
    print()

    print('CALL TO `upper_string(str)`:')
    str = input('Enter a string: ')
    # After we get input from the user and store it as `str` we can
    # pass `str` to the function `capitalize_string()` and let
    # that function do the dirty work. Since that function RETURNS
    # a value we need to put it in a `print()` statement.
    print()
    print(wonky_util.upper_string(str))

    print()
    print()

    print('CALL TO `compliment()`:')
    # The `compliment()` function merely PRINTS on the screen 
    # a compliment. You can decide what that is when you
    # author the `compliment()` function!
    wonky_util.compliment()

    print()
    print()

    print('CALL TO `personal_compliment(name)`:')

    name = input('Enter your name: ')
    # Let's take the variable `name` and run it through
    # the uppercase function before it is sent to the
    # `personal_compliment()` function. That might be
    # cool! Again, since the function `personal_compliment()`
    # doesn't RETURN anything we should not put it in a PRINT
    # statement.
    print()
    wonky_util.personal_compliment(wonky_util.upper_string(name))

    print()
    print()

    print('CALL TO `add(num1, num2)`:')
    # The `add(num1, num2` function RETURNS a value
    # so we should be sure to take that value and either assign
    # it to a local variable *or* just output it in 
    # a PRINT statement.
    number1 = int(input('Enter a number: '))
    print()
    number2 = int(input('Enter a second number: '))
    print()
    print('The sum is', wonky_util.add(number1, number2))

    print()
    print()

    print('==================================================================')
    print(' THIS CONCLUDES THE TEST. Thank you for your patience and effort. ')
    print('==================================================================')

    
    
main()












# SAMPLE OUTPUT

# ==================================================================
# THIS IS A TEST OF THE `wonky_util.py` module. This is only a test.
# ==================================================================


# CALL TO `roll_one_d12()`:
# 8


# CALL TO `roll_two_d12()`:
# Die 1 is 1 and die 2 is 7 and the sum is 8


# CALL TO `upper_string(str)`:
# Enter a string: dave
# DAVE


# CALL TO `compliment()`:
# You smell like petunias, which is nice!


# CALL TO `personal_compliment(name)`:
# Enter your name: DAVE
# Hey, DAVE you are super nice!


# CALL TO `add(num1, num2)`:
# Enter a number: 4
# Enter a second number: 5
# The sum is 9


# ==================================================================
#  THIS CONCLUDES THE TEST. Thank you for your patience and effort.
# ==================================================================




```

^^^ `wonky_util.py`

```python ^copy

# FILE NAME - wonky_util.py
import random

def roll_one_d12():
    '''
    RETURN one number between 1 and 12.
    '''
    



def roll_two_d12():
    '''
    This function will not return anything but *will* PRINT
    two values (each one is a call to `roll_one_d12()`) and then
    it will PRINT the sum. 
    '''
    # To implement this function, your best bet is to create
    # two different variables and assign each one a value
    # that is the result of calling `roll_one_d12()`. That makes
    # it easier to do the output and the math. 







def upper_string(str):
    '''
    This function takes, as input, one string and will
    return the uppercase version. Note that this function
    RETURNS and does not *print* the result.
    '''
    






def compliment():
    '''
    This function will PRINT one compliment on the screen.
    '''







def personal_compliment(name):
    '''
    This function takes in a name and PRINTS it on the screen
    a personalized compliment.
    '''








def add(num1, num2):
    '''
    This function RETURNS the sum of the two numbers passed in
    as input.
    '''







# SAMPLE OUTPUT

# ==================================================================
# THIS IS A TEST OF THE `wonky_util.py` module. This is only a test.
# ==================================================================


# CALL TO `roll_one_d12()`:
# 8


# CALL TO `roll_two_d12()`:
# Die 1 is 1 and die 2 is 7 and the sum is 8


# CALL TO `upper_string(str)`:
# Enter a string: dave
# DAVE


# CALL TO `compliment()`:
# You smell like petunias, which is nice!


# CALL TO `personal_compliment(name)`:
# Enter your name: DAVE
# Hey, DAVE you are super nice!


# CALL TO `add(num1, num2)`:
# Enter a number: 4
# Enter a second number: 5
# The sum is 9


# ==================================================================
#  THIS CONCLUDES THE TEST. Thank you for your patience and effort.
# ==================================================================




```

^acc-end





<br /><br />
