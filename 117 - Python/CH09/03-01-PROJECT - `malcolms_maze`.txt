^^ PROJECT - `malcolms_maze`

## DESCRIPTION

My buddy Malcolm and I like to brainstorm evil new ideas for Python class. Once, as we were walking our dogs, he suggested a maze. The user gets to enter the starting point (a URL). That URL hosts an address to the next stop in the maze. If you go to *that* URL, you'll find *another* URL. This goes on for some time. You reach the end of the maze when you encounter a page that has only one four-letter word.

Here are some guidelines to help you understand the schema of the websites:

* The base URL is: `https://phishingdemo.org/python/scraping/maze/`. For instance, the first step in the maze is `https://phishingdemo.org/python/scraping/maze/maze.html`

* Except for the last step in the maze, the formatting of every page is the same - text that says "`Next: `" and then a long number followed by "`.html`". You need to grab everything but the `Next: ` part.

^=^

```
Next: 8513664478886891394555646402835183262752360655675524428945795335146894399778133796724879595664982283.html
```

^=

* This is the next step in the maze! So you would go to

^=^

```
https://phishingdemo.org/python/scraping/maze/8513664478886891394555646402835183262752360655675524428945795335146894399778133796724879595664982283.html
```
^=

* You'll need a loop to keep doing this until you get to the end.

* The format of every page is exactly the same. So you can visit any of the sites, inspect the structure, and reliably scrape the pages.

* The end of the maze will have a four letter word. For instance, the first maze ends with a page that says, "`DONE`". The HTML of the page is as follows:

^=^

```html
<html><body>DONE</body></html>
```

^=


## SPECIFICATIONS

* You will need to install some packages on your system:

^=^ ,,,,

```
pip3 install requests
pip3 install --update requests
pip3 install beautifulsoup4
```
^=

* You will need to ask the user for place to start. In this example, the user will type in "`maze`". It is up to you to prepend and append the proper characters to get `https://phishingdemo.org/python/scraping/maze/maze.html`

* Add a comment with your name, date, and program description at the top!

* Your output must match the Sample Output *exactly*.

* While in development, you may want to output information that isn't needed in the final product (just to make sure you know what you are dealing with).

* You *do not* need to use `beautifulsoup` for this lab, though it might make it easier.
  * Depending on how you parse the contents of each website you *might* run into a problem. You might *think* that your URL is correct but it might contain some weird whitespace that you can't see (like a return). I recommend "*trimming*" your URLs - that will remove any whitespace before or after. Here's what that looks like (assume that `url` is a variable that hold some text):

^=^

```python

url = url.strip()

```

^=

<br /><br /><br />

## SAMPLE OUTPUT


```
Enter the starting page: maze
DONE
```

<br />

```
Enter the starting page: maze2
PEAR
```

<br />

## STARTER CODE

You may use the following code as starter code. You will need to change the comments (for instance, your name and the date).

^callout file-download

[`maze.py`](https://drive.google.com/uc?export=download&id=1-oNrDQuuWPj0s4CYqLQLhgEZdOSskTmY)

Download these files and load them into your IDE.

^callout-end

<br />

^callout b-github

<br />

Click here to fork the repository.

^callout-end

<br /><br />
