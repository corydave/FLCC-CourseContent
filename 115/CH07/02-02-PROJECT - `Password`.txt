^^ PROJECT - `Password`

## DESCRIPTION
The notion of passwords has been around for years, and software to guess passwords has been around for just as long. Most password management philosophies recommend that passwords do not use words found in the dictionary but are a combination of special characters, numbers, and letters (both uppercase and lowercase). Some software - like [KeePass](http://keepass.info/) or [LastPass](https://www.lastpass.com/) - will even generate random passwords for you (as well as manage them). In recent years, a theory emerged about using sentences as passwords. The [current thinking](https://www.howtogeek.com/195430/how-to-create-a-strong-password-and-remember-it/) is that a passphrase- a phrase composed of several completely random words - is the most secure option.

This project is intended to use the idea of password management as a venue for writing software using methods.


## WALKTHROUGH

This software has only two phases:

* **STEP 1: Display a menu of options**

    The menu of options (see the Sample Output for details) should provide three options:

    1. Show the password specifications
    2. Generate a random password
        
        * The first two characters are lowercase letters
        * The second two characters are uppercase letters
        * The third two characters are numbers (0 - 9)
        * The fourth two characters are any valid character

    3. Test to see if a password is valid

        * It must be at least 8 characters long
        * At least one letter must be capitalized
        * It must contain at least 2 numbers
<br />

* **STEP 2: Run the appropriate code based on the input from the user**

    `if` statements will be used to decide which method will be called.


## SPECIFICATIONS

* Starter code has been provided for this lab.

* Add a comment with your name, date, and program description at the top!

* Your output must match the sample output exactly. 

* The program skeleton will be provided for you. You need to breathe life into the method stubs. Note that the `main` method should not need to be altered, although you should look at it and make sure you understand how all the methods work together.

## SAMPLE OUTPUT

^acc

^^^ SAMPLE OUTPUT

```
Here is your menu of options:
	1. See the password rules
	2. Generate a random password
	3. Test the validity of a password

Please make your selection:
1

The rules for your password are:
  1. It must be at least 8 characters long
  2. At least one letter must be capitalized
  3. It must contain at least 2 numbers
```

<br />

```
Here is your menu of options:
    1. See the password rules
    2. Generate a random password
    3. Test the validity of a password

Please make your selection:
2

Enter seed:
42

Your password is: ahWM05"?

```

<br />

```
Here is your menu of options:
    1. See the password rules
    2. Generate a random password
    3. Test the validity of a password

Please make your selection:
2

Enter seed:
79

Your password is: koLN59#c
```

<br />

```
Here is your menu of options:
	1. See the password rules
	2. Generate a random password
	3. Test the validity of a password

Please make your selection: 
3

Enter a password to test: 
QAZwsx123


Your password is valid.
```

<br />

```
Here is your menu of options:
	1. See the password rules
	2. Generate a random password
	3. Test the validity of a password

Please make your selection:
3

Enter a password to test: 
abcdeF12


Your password is valid.
```

<br />

```Here is your menu of options:
	1. See the password rules
	2. Generate a random password
	3. Test the validity of a password

Please make your selection: 
3

Enter a password to test: 
abcdef12

Your password is NOT valid.
```

<br />

```
Here is your menu of options:
	1. See the password rules
	2. Generate a random password
	3. Test the validity of a password

Please make your selection: 
3

Enter a password to test: 
AbC23

Your password is NOT valid.
```

<br />

```
Here is your menu of options:
	1. See the password rules
	2. Generate a random password
	3. Test the validity of a password

Please make your selection: 
3

Enter a password to test: 
ABCdefg1

Your password is NOT valid.

```

<br />

^acc-end


<br />


## STARTER CODE

You may use the following code as starter code. You will need to change the comments (for instance, your name and the date).

^callout file-download

[`Password.java`](https://drive.google.com/uc?export=download&id=1cLQEM2VNM1l2nOdX1strlURDgCRQVCcD)

Download these files and load them into your IDE.

^callout-end


^acc

^^^ `Password.java`

```java ^copy

/**
 * Description
 *
 * @author Student Name
 * @since Date Started
 */

import java.util.Scanner;
import java.util.Random;

public class Password {

	public static void main(String[] args) {

		
		// Create an instance of Scanner
		Scanner sc = new Scanner(System.in);
		
		// Call 'displayMenu()' to show the menu to the user
		displayMenu();
	
		// Read in input from user and assign to 'choice'
		int choice = sc.nextInt();

        // IF-ELSE statements to decide which method to call
		if (choice == 1) {    // display password specifications to the user
		
			showPasswordSpecifications();
		
		} else if (choice == 2) {	// generate a random password for the user
		    
		    System.out.println("\nYour password is: " + generateRandomPassword(sc));
		    
		} else if (choice == 3) {   // ask the user to input a password and test for validity
		    
		    System.out.println("\nEnter a password to test:");
			sc.nextLine();
			String input = sc.nextLine();
			
			if (verifyPasswordSpecifications(input) == true) {
				
				System.out.println("\nYour password is valid.");
				
			} else {
			    
				System.out.println("\nYour password is NOT valid.");
				
			}
			
		} else {
			
			System.out.println("Sorry! That was an invalid option.");
			
		}

        // close the scanner
		sc.close();

	}

	public static void displayMenu() {
		// PRE-CONDITIONS: None
		// POST-CONDITIONS: This method displays the menu of options 
		// (as per the specifications)		
		
		
		 
		




	    System.out.println("displayMenu() was called.");

	}

	public static String generateRandomPassword(Scanner sc) {  
		// PRE-CONDITIONS: The scanner used to read in the random number generator 
		// seed from the user
		
		// POST-CONDITIONS: A password that satisfies the specifications is
		// generated and returned.
		
		// This method will return a String password that subscribes to
		// the following criteria:
		
		// 1. There are eight characters in the password
		// 2. The first two characters are lowercase letters.
		// 3. The second two characters are uppercase letters.
		// 3. The characters in positions 4 and 5 are numbers.
		// 4. The characters in positions 6 and 7 are any character.

	    String tempPass = "";	// this String will become the password
	    
	    
	    
	    
	    
		System.out.println("generateRandomPassword(sc) was called.");
        
		return tempPass;

	}

	public static void showPasswordSpecifications() {
		// PRE-CONDITIONS: None
		// POST-CONDITIONS: The specifications for a valid password are
		// displayed on the screen
			
		
		
		System.out.println("showPasswordSpecifications() was called");

	}

	public static boolean verifyPasswordSpecifications(String input) {
		// PRE-CONDITIONS: The main method will pass in a String
		// POST-CONDITIONS: "true" will be returned if the parameter "input" is
		// a valid password, as per the specifications. "false" will be returned otherwise
		//
		// The specifications are:
		// 1. There are at least eight characters in the password
		// 2. At least one of the characters is capitalized
		// 3. There are at least two digits (0-9) in the password

		
		
    
		System.out.println("verifyPasswordSpecifications(" + input + ") was called and 'true' was returned.");
		return true;

	}

}







// =============== LAB SUMMARY ===============

/*
1. What was the hardest part of this lab?




2. What will you always remember (never forget) from this exercise?




*/


```



^acc-end





<br /><br />
